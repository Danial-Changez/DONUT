<File version="3.2">
  <Code><![CDATA[#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
        
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
        $ConsoleOutput (Type: System.Collections.ArrayList)
#>
    Param ([String]$Commandline)
        
    #--------------------------------------------------------------------------
    # Robust script root resolution for packaged and dev environments
	
	# Get the directory of the current script or host
	$hostPath = [System.IO.Path]::GetDirectoryName($HostInvocation.MyCommand.Path)
	
	# Go up 2 levels: x64 -> bin
	$projectRoot = Split-Path -Path $hostPath -Parent # x64
	$projectRoot = Split-Path -Path $projectRoot -Parent # bin
	
	# Now $projectRoot points to your project root
	$updater = Join-Path -Path $projectRoot -ChildPath '\src\Updater.ps1'
	$mainwindow = Join-Path -Path $projectRoot -ChildPath 'src\MainWindow.ps1'

    if (Test-Path $updater) { . $updater }
    else { Write-Host "Updater script not found: $updater" -ForegroundColor Red }

    if (Test-Path $mainwindow) { . $mainwindow }
    else { Write-Host "MainWindow script not found: $mainwindow" -ForegroundColor Red }

    $script:ExitCode = 0 #Set the exit code for the Packager
}

]]></Code>
  <TV>0</TV>
</File>